name: Build Shared Library (Pull Request)

on:
  pull_request:
  workflow_dispatch:
#  schedule:
#    - cron:  '0 6 * * 1' # every monday 6am

jobs:
  native-image:
    strategy:
      fail-fast: false
      matrix:
        job_name:
          - linux-amd64
          - macos-amd64
          - windows-amd64

        include:
          - job_name: linux-amd64
            os: ubuntu-latest

          - job_name: macos-amd64
            os: macOS-latest

          - job_name: windows-amd64
            os: windows-latest

    name: Build Shared Library on ${{ matrix.job_name }}
    runs-on: ${{ matrix.os }}

    steps:
      # git checkout
      - name: Checkout the repository
        uses: actions/checkout@v3

      # install build dependencies (windows only)
      - name: Configure Developer Command Prompt for Microsoft Visual C++ on Windows
        uses: ilammy/msvc-dev-cmd@v1.11.0
        if: matrix.os == 'windows-latest'

      - name: Configure MSBuild on Windows
        uses: microsoft/setup-msbuild@v1
        if: matrix.os == 'windows-latest'

      # set up graalvm
      - name: Set up GraalVM environment
        uses: ayltai/setup-graalvm@v1
        with:
          java-version: 11
          graalvm-version: 22.2.0
          native-image: true

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # build native image
      - name: Build Native Image
        env:
          MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true -Dmaven.javadoc.skip=true"
        run: ./mvnw --batch-mode --errors --fail-at-end --show-version --update-snapshots -DinstallAtEnd=true -DdeployAtEnd=true -Pnative -DskipTests --projects drasyl-shared-library --also-make package

      # package native image
      - name: Build Package on *nix x86
        run: |
          VERSION=$(./mvnw help:evaluate "-Dexpression=project.version" -q -DforceStdout)
          mkdir -p libdrasyl-${VERSION}-${{ matrix.job_name }}/
          ls -l .
          mv ./graal_isolate.h ./libdrasyl.so ./libdrasyl.h ./drasyl-shared-library/src/main/c/drasyl.h libdrasyl-${VERSION}-${{ matrix.job_name }}
          cp ./LICENSE libdrasyl-${VERSION}-${{ matrix.job_name }}/
          zip -r libdrasyl-${VERSION}-${{ matrix.job_name }}.zip ./libdrasyl-${VERSION}-${{ matrix.job_name }}
          for file in libdrasyl-*.zip; do sha256sum "$file" | awk '{print $1}' > "$file.sha256"; done
        if: success() && matrix.os == 'ubuntu-latest'

      - name: Build Package on Mac x86
        run: |
          VERSION=$(./mvnw help:evaluate "-Dexpression=project.version" -q -DforceStdout)
          mkdir -p libdrasyl-${VERSION}-${{ matrix.job_name }}/
          mv ./graal_isolate.h ./libdrasyl.dylib ./libdrasyl.h ./drasyl-shared-library/src/main/c/drasyl.h libdrasyl-${VERSION}-${{ matrix.job_name }}
          cp ./LICENSE libdrasyl-${VERSION}-${{ matrix.job_name }}/
          zip -r libdrasyl-${VERSION}-${{ matrix.job_name }}.zip ./libdrasyl-${VERSION}-${{ matrix.job_name }}
          for file in libdrasyl-*.zip; do shasum "$file" | awk '{print $1}' > "$file.sha256"; done
        if: success() && matrix.os == 'macOS-latest'

      - name: Build Package on Windows
        run: |
          $VERSION = .\mvnw.cmd help:evaluate "-Dexpression=project.version" -q -DforceStdout
          New-Item "./libdrasyl-${VERSION}-${{ matrix.job_name }}/" -ItemType Directory -ea 0
          Get-ChildItem -Path .
          Move-Item -Path ./graal_isolate.h -Destination "./libdrasyl-${VERSION}-${{ matrix.job_name }}"
          Move-Item -Path ./libdrasyl.dll -Destination "./libdrasyl-${VERSION}-${{ matrix.job_name }}"
          Move-Item -Path ./libdrasyl.lib -Destination "./libdrasyl-${VERSION}-${{ matrix.job_name }}"
          Move-Item -Path ./libdrasyl.h -Destination "./libdrasyl-${VERSION}-${{ matrix.job_name }}"
          Move-Item -Path ./drasyl-shared-library/src/main/c/drasyl.h -Destination "./libdrasyl-${VERSION}-${{ matrix.job_name }}"
          Copy-Item "./LICENSE" -Destination "./libdrasyl-${VERSION}-${{ matrix.job_name }}"
          Compress-Archive -Path "./libdrasyl-${VERSION}-${{ matrix.job_name }}" -Update -DestinationPath ./libdrasyl-${VERSION}-${{ matrix.job_name }}.zip
          CertUtil -hashfile "./libdrasyl-${VERSION}-${{ matrix.job_name }}.zip" SHA256 | Select-String -Pattern "CertUtil","SHA256" -CaseSensitive -NotMatch > "./libdrasyl-${VERSION}-${{ matrix.job_name }}.zip.sha256"; (Get-Content "./libdrasyl-${VERSION}-${{ matrix.job_name }}.zip.sha256") -join '' | Set-Content "./libdrasyl-${VERSION}-${{ matrix.job_name }}.zip.sha256"
        if: success() && matrix.os == 'windows-latest'

      # publish artifact
      - name: Publish artifact
        uses: actions/upload-artifact@v3
        with:
          name: shared-library-${{ matrix.job_name }}
          path: libdrasyl-*-${{ matrix.job_name }}.zip

      # publish artifact hash
      - name: Publish artifact hash
        uses: actions/upload-artifact@v3
        with:
          name: shared-library-${{ matrix.job_name }}-Hash
          path: libdrasyl-*-${{ matrix.job_name }}.zip.sha256

  wheels:
    strategy:
      fail-fast: false
      matrix:
        job_name:
#          - linux-amd64
          - macos-amd64
#          - windows-amd64

        include:
#          - job_name: linux-amd64
#            os: ubuntu-latest

          - job_name: macos-amd64
            os: macOS-latest

#          - job_name: windows-amd64
#            os: windows-latest

    name: Build wheels on ${{ matrix.job_name }}
    runs-on: ${{ matrix.os }}
    needs: native-image

    steps:
      - uses: actions/checkout@v3

      - name: Download shared library artifact
        uses: actions/download-artifact@v3
        with:
          name: shared-library-${{ matrix.job_name }}

      - name: Extract shared library on *nix/Mac
        run: |
          unzip libdrasyl-*.zip -d ./drasyl-shared-library/pypi/src/drasyl/
          mv ./drasyl-shared-library/pypi/src/drasyl/libdrasyl-* ./drasyl-shared-library/pypi/src/drasyl/libdrasyl
          ls -R ./drasyl-shared-library/pypi
        if: success() && matrix.os != 'windows-latest'

      - uses: actions/setup-python@v3

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.9.0

      - name: Build wheels
        working-directory: ./drasyl-shared-library/pypi
        run: python -m cibuildwheel --output-dir ../../wheelhouse/
        env:
          CIBW_ARCHS: auto
          CIBW_BUILD: cp310-*

      - uses: actions/upload-artifact@v3
        with:
          name: wheel-${{ matrix.job_name }}
          path: ./wheelhouse/*.whl

      - name: Publish package to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages_dir: ./wheelhouse/
          repository_url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
