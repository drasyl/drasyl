name: Build Shared Library (Pull Request)

on:
  pull_request:
  workflow_dispatch:
#  schedule:
#    - cron:  '0 6 * * 1' # every monday 6am

jobs:
  native-image:
    strategy:
      fail-fast: false
      matrix:
        job_name:
          - linux-amd64
          - macos-amd64
          - macos-arm64
          - windows-amd64

        include:
          - job_name: linux-amd64
            os: ubuntu-20.04 # run intentionally on older ubuntu. Otherwise, graal builds will depend on a too-new libc version, which is not available on every linux distributions

          - job_name: macos-amd64
            os: macOS-13

          - job_name: macos-arm64
            os: macOS-latest

          - job_name: windows-amd64
            os: windows-latest

    name: Build Shared Library on ${{ matrix.job_name }}
    runs-on: ${{ matrix.os }}

    steps:
      # git checkout
      - name: Checkout the repository
        uses: actions/checkout@v4.1.2

      # install build dependencies (windows only)
      - name: Configure Developer Command Prompt for Microsoft Visual C++ on Windows
        uses: ilammy/msvc-dev-cmd@v1.13.0
        if: startsWith(matrix.os, 'windows-')

      - name: Configure MSBuild on Windows
        uses: microsoft/setup-msbuild@v2
        if: startsWith(matrix.os, 'windows-')

      # set up GraalVM
      - name: Set up GraalVM environment
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: 17
          distribution: 'graalvm'
          components: native-image
          cache: 'maven'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # build native image
      - name: Build Native Image
        env:
          MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
          GRAALVM_QUICK_BUILD: "true"
        run: ./mvnw --batch-mode --errors --fail-at-end --show-version --update-snapshots -DinstallAtEnd=true -DdeployAtEnd=true --activate-profiles native,fast --projects drasyl-shared-library --also-make package

      # package native image
      - name: Build Package on *nix x86
        run: |
          VERSION=$(./mvnw help:evaluate "-Dexpression=project.version" -q -DforceStdout)
          mkdir -p libdrasyl-${VERSION}-${{ matrix.job_name }}/
          mv ./graal_isolate.h ./libdrasyl.so ./libdrasyl.h ./drasyl-shared-library/src/main/c/drasyl.h libdrasyl-${VERSION}-${{ matrix.job_name }}
          cp ./LICENSE libdrasyl-${VERSION}-${{ matrix.job_name }}/
          zip -r libdrasyl-${VERSION}-${{ matrix.job_name }}.zip ./libdrasyl-${VERSION}-${{ matrix.job_name }}
          for file in libdrasyl-*.zip; do sha256sum "$file" | awk '{print $1}' > "$file.sha256"; done
        if: success() && startsWith(matrix.os, 'ubuntu-')

      - name: Build Package on Mac x86
        run: |
          VERSION=$(./mvnw help:evaluate "-Dexpression=project.version" -q -DforceStdout)
          mkdir -p libdrasyl-${VERSION}-${{ matrix.job_name }}/
          mv ./graal_isolate.h ./libdrasyl.dylib ./libdrasyl.h ./drasyl-shared-library/src/main/c/drasyl.h libdrasyl-${VERSION}-${{ matrix.job_name }}
          cp ./LICENSE libdrasyl-${VERSION}-${{ matrix.job_name }}/
          zip -r libdrasyl-${VERSION}-${{ matrix.job_name }}.zip ./libdrasyl-${VERSION}-${{ matrix.job_name }}
          for file in libdrasyl-*.zip; do shasum "$file" | awk '{print $1}' > "$file.sha256"; done
        if: success() && startsWith(matrix.os, 'macOS-')

      - name: Build Package on Windows
        run: |
          $VERSION = .\mvnw.cmd help:evaluate "-Dexpression=project.version" -q -DforceStdout
          New-Item "./libdrasyl-${VERSION}-${{ matrix.job_name }}/" -ItemType Directory -ea 0
          Move-Item -Path ./graal_isolate.h -Destination "./libdrasyl-${VERSION}-${{ matrix.job_name }}"
          Move-Item -Path ./libdrasyl.dll -Destination "./libdrasyl-${VERSION}-${{ matrix.job_name }}"
          Move-Item -Path ./libdrasyl.lib -Destination "./libdrasyl-${VERSION}-${{ matrix.job_name }}"
          Move-Item -Path ./libdrasyl.h -Destination "./libdrasyl-${VERSION}-${{ matrix.job_name }}"
          Move-Item -Path ./drasyl-shared-library/src/main/c/drasyl.h -Destination "./libdrasyl-${VERSION}-${{ matrix.job_name }}"
          Copy-Item "./LICENSE" -Destination "./libdrasyl-${VERSION}-${{ matrix.job_name }}"
          Compress-Archive -Path "./libdrasyl-${VERSION}-${{ matrix.job_name }}" -Update -DestinationPath ./libdrasyl-${VERSION}-${{ matrix.job_name }}.zip
          CertUtil -hashfile "./libdrasyl-${VERSION}-${{ matrix.job_name }}.zip" SHA256 | Select-String -Pattern "CertUtil","SHA256" -CaseSensitive -NotMatch > "./libdrasyl-${VERSION}-${{ matrix.job_name }}.zip.sha256"; (Get-Content "./libdrasyl-${VERSION}-${{ matrix.job_name }}.zip.sha256") -join '' | Set-Content "./libdrasyl-${VERSION}-${{ matrix.job_name }}.zip.sha256"
        if: success() && startsWith(matrix.os, 'windows-')

      # publish artifact
      - name: Publish artifact
        uses: actions/upload-artifact@v4
        with:
          name: shared-library-${{ matrix.job_name }}
          path: libdrasyl-*-${{ matrix.job_name }}.zip

      # publish artifact hash
      - name: Publish artifact hash
        uses: actions/upload-artifact@v4
        with:
          name: shared-library-${{ matrix.job_name }}-Hash
          path: libdrasyl-*-${{ matrix.job_name }}.zip.sha256

  build-wheels:
    strategy:
      fail-fast: false
      matrix:
        job_name:
          - linux-amd64
          - macos-amd64
          - windows-amd64

        include:
          - job_name: linux-amd64
            os: ubuntu-20.04 # run intentionally on older ubuntu. Otherwise, graal builds will depend on a too-new libc version, which is not available on every linux distributions

          - job_name: macos-amd64
            os: macOS-latest

          - job_name: windows-amd64
            os: windows-latest

    name: Build wheels on ${{ matrix.job_name }}
    runs-on: ${{ matrix.os }}
    needs: native-image

    steps:
      - uses: actions/checkout@v4.1.2

      - name: Download shared library artifact
        uses: actions/download-artifact@v4
        with:
          name: shared-library-${{ matrix.job_name }}

      - name: Set up JDK
        uses: actions/setup-java@v4.7.0
        with:
          java-version: 11
          distribution: 'adopt'

      - name: Extract shared library on *nix/Mac
        run: |
          VERSION=$(./mvnw help:evaluate "-Dexpression=project.version" -q -DforceStdout)
          unzip libdrasyl-*.zip -d ./drasyl-shared-library/pypi/src/drasyl/
          mv ./drasyl-shared-library/pypi/src/drasyl/libdrasyl-* ./drasyl-shared-library/pypi/src/drasyl/libdrasyl/
          echo "${VERSION/-SNAPSHOT/.dev0}" > ./drasyl-shared-library/pypi/VERSION
        if: success() && matrix.os != 'windows-latest'

      - name: Extract shared library on Windows
        run: |
          $VERSION = .\mvnw.cmd help:evaluate "-Dexpression=project.version" -q -DforceStdout
          Expand-Archive -Path .\libdrasyl-*.zip -DestinationPath .\drasyl-shared-library\pypi\src\drasyl\
          Move-Item -Path .\drasyl-shared-library\pypi\src\drasyl\libdrasyl-* -Destination .\drasyl-shared-library\pypi\src\drasyl\libdrasyl\
          Get-ChildItem -Path .\drasyl-shared-library\pypi\src\drasyl\
          $VERSION.replace('-SNAPSHOT', '.dev0') > .\drasyl-shared-library\pypi\VERSION
        if: success() && startsWith(matrix.os, 'windows-')

      - uses: actions/setup-python@v5.4.0
        with:
          python-version: '3.10'
          check-latest: true

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.9.0

      - name: Build wheels
        working-directory: ./drasyl-shared-library/pypi/
        run: python -m cibuildwheel --output-dir ../../wheelhouse/
        env:
          CIBW_ARCHS: auto64
          #CIBW_BUILD_VERBOSITY: 3
          # "auditwheel repair" fails despite the fact that our python package runs
          # under many linux distributions. So we just deactivate it.
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: ""

      - uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.job_name }}
          path: ./wheelhouse/*.whl
