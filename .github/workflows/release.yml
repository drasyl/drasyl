name: Release

on:
  release:
    types: [published]

jobs:
  cli-java:
    name: Java
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4.1.2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v4.6.0
        with:
          java-version: 11
          distribution: 'adopt'
          cache: 'maven'
      - name: Build with Maven
        env:
          MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
        run: ./mvnw --batch-mode --errors --fail-at-end --show-version --update-snapshots -DinstallAtEnd=true -DdeployAtEnd=true --activate-profiles fast --projects drasyl-cli --also-make package
      - name: Build hash
        run: for file in drasyl-*.zip; do sha256sum "$file" | awk '{print $1}' > "$file.sha256"; done
      - name: Upload Package
        uses: softprops/action-gh-release@v2
        with:
          files: |
            drasyl-*.zip
            drasyl-*.zip.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  shared-library:
    strategy:
      fail-fast: false
      matrix:
        job_name:
          - linux-amd64
          - linux-arm64
          - macos-amd64
          - macos-arm64
          - windows-amd64

        include:
          - job_name: linux-amd64
            os: ubuntu-20.04 # run intentionally on older ubuntu. Otherwise, graal builds will depend on a too-new libc version, which is not available on every linux distributions

          - job_name: linux-arm64
            os: [ self-hosted, linux, ARM64 ]

          - job_name: macos-amd64
            os: macOS-13

          - job_name: macos-arm64
            os: macOS-latest

          - job_name: windows-amd64
            os: windows-latest

    name: Build Shared Library on ${{ matrix.job_name }}
    runs-on: ${{ matrix.os }}

    steps:
      # git checkout
      - name: Checkout the repository
        uses: actions/checkout@v4.1.2

      # install build dependencies (windows only)
      - name: Configure Developer Command Prompt for Microsoft Visual C++ on Windows
        uses: ilammy/msvc-dev-cmd@v1.13.0
        if: startsWith(matrix.os, 'windows-')

      - name: Configure MSBuild on Windows
        uses: microsoft/setup-msbuild@v2
        if: startsWith(matrix.os, 'windows-')

      # set up GraalVM
      - name: Set up GraalVM environment
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: 17
          distribution: 'graalvm'
          components: native-image
          cache: 'maven'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # build native image
      - name: Build Native Image
        env:
          MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
        run: ./mvnw --batch-mode --errors --fail-at-end --show-version --update-snapshots -DinstallAtEnd=true -DdeployAtEnd=true --activate-profiles native,fast --projects drasyl-shared-library --also-make package

      # package native image
      - name: Build Package on *nix x86
        run: |
          VERSION=$(./mvnw help:evaluate "-Dexpression=project.version" -q -DforceStdout)
          mkdir -p libdrasyl-${VERSION}-${{ matrix.job_name }}/
          mv ./graal_isolate.h ./libdrasyl.so ./libdrasyl.h ./drasyl-shared-library/src/main/c/drasyl.h libdrasyl-${VERSION}-${{ matrix.job_name }}
          cp ./LICENSE libdrasyl-${VERSION}-${{ matrix.job_name }}/
          zip -r libdrasyl-${VERSION}-${{ matrix.job_name }}.zip ./libdrasyl-${VERSION}-${{ matrix.job_name }}
          for file in libdrasyl-*.zip; do sha256sum "$file" | awk '{print $1}' > "$file.sha256"; done
        if: success() && startsWith(matrix.os, 'ubuntu-')

      - name: Build Package on *nix ARM
        run: |
          sudo apt-get install zip -y
          VERSION=$(./mvnw help:evaluate "-Dexpression=project.version" -q -DforceStdout)
          mkdir -p libdrasyl-${VERSION}-${{ matrix.job_name }}/
          mv ./graal_isolate.h ./libdrasyl.so ./libdrasyl.h ./drasyl-shared-library/src/main/c/drasyl.h libdrasyl-${VERSION}-${{ matrix.job_name }}
          cp ./LICENSE libdrasyl-${VERSION}-${{ matrix.job_name }}/
          zip -r libdrasyl-${VERSION}-${{ matrix.job_name }}.zip ./libdrasyl-${VERSION}-${{ matrix.job_name }}
          for file in libdrasyl-*.zip; do sha256sum "$file" | awk '{print $1}' > "$file.sha256"; done
        if: success() && matrix.job_name == 'linux-arm64'

      - name: Build Package on Mac x86
        run: |
          VERSION=$(./mvnw help:evaluate "-Dexpression=project.version" -q -DforceStdout)
          mkdir -p libdrasyl-${VERSION}-${{ matrix.job_name }}/
          mv ./graal_isolate.h ./libdrasyl.dylib ./libdrasyl.h ./drasyl-shared-library/src/main/c/drasyl.h libdrasyl-${VERSION}-${{ matrix.job_name }}
          cp ./LICENSE libdrasyl-${VERSION}-${{ matrix.job_name }}/
          zip -r libdrasyl-${VERSION}-${{ matrix.job_name }}.zip ./libdrasyl-${VERSION}-${{ matrix.job_name }}
          for file in libdrasyl-*.zip; do shasum "$file" | awk '{print $1}' > "$file.sha256"; done
        if: success() && startsWith(matrix.os, 'macOS-')

      - name: Build Package on Windows
        run: |
          $VERSION = .\mvnw.cmd help:evaluate "-Dexpression=project.version" -q -DforceStdout
          New-Item "./libdrasyl-${VERSION}-${{ matrix.job_name }}/" -ItemType Directory -ea 0
          Move-Item -Path ./graal_isolate.h -Destination "./libdrasyl-${VERSION}-${{ matrix.job_name }}"
          Move-Item -Path ./libdrasyl.dll -Destination "./libdrasyl-${VERSION}-${{ matrix.job_name }}"
          Move-Item -Path ./libdrasyl.lib -Destination "./libdrasyl-${VERSION}-${{ matrix.job_name }}"
          Move-Item -Path ./libdrasyl.h -Destination "./libdrasyl-${VERSION}-${{ matrix.job_name }}"
          Move-Item -Path ./drasyl-shared-library/src/main/c/drasyl.h -Destination "./libdrasyl-${VERSION}-${{ matrix.job_name }}"
          Copy-Item "./LICENSE" -Destination "./libdrasyl-${VERSION}-${{ matrix.job_name }}"
          Compress-Archive -Path "./libdrasyl-${VERSION}-${{ matrix.job_name }}" -Update -DestinationPath ./libdrasyl-${VERSION}-${{ matrix.job_name }}.zip
          CertUtil -hashfile "./libdrasyl-${VERSION}-${{ matrix.job_name }}.zip" SHA256 | Select-String -Pattern "CertUtil","SHA256" -CaseSensitive -NotMatch > "./libdrasyl-${VERSION}-${{ matrix.job_name }}.zip.sha256"; (Get-Content "./libdrasyl-${VERSION}-${{ matrix.job_name }}.zip.sha256") -join '' | Set-Content "./libdrasyl-${VERSION}-${{ matrix.job_name }}.zip.sha256"
        if: success() && startsWith(matrix.os, 'windows-')

      # upload package
      - name: Upload Package
        uses: softprops/action-gh-release@v2
        with:
          files: |
            libdrasyl-*.zip
            libdrasyl-*.zip.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # publish artifact (required by build-wheels job)
      - name: Publish artifact
        uses: actions/upload-artifact@v4
        with:
          name: shared-library-${{ matrix.job_name }}
          path: libdrasyl-*-${{ matrix.job_name }}.zip

  build-wheels:
    strategy:
      fail-fast: false
      matrix:
        job_name:
          - linux-amd64
          # actions/setup-python does not support arm64 (yet): https://github.com/actions/setup-python
          # - linux-arm64
          - macos-amd64
          - windows-amd64

        include:
          - job_name: linux-amd64
            os: ubuntu-latest

          # - job_name: linux-arm64
          #   os: [ self-hosted, linux, ARM64 ]

          - job_name: macos-amd64
            os: macOS-latest

          - job_name: windows-amd64
            os: windows-latest

    name: Build wheels on ${{ matrix.job_name }}
    runs-on: ${{ matrix.os }}
    needs: shared-library

    steps:
      - uses: actions/checkout@v4.1.2

      - name: Download shared library artifact
        uses: actions/download-artifact@v4
        with:
          name: shared-library-${{ matrix.job_name }}

      - name: Set up JDK
        uses: actions/setup-java@v4.6.0
        with:
          java-version: 11
          distribution: 'adopt'

      - name: Extract shared library on *nix/Mac
        run: |
          VERSION=$(./mvnw help:evaluate "-Dexpression=project.version" -q -DforceStdout)
          unzip libdrasyl-*.zip -d ./drasyl-shared-library/pypi/src/drasyl/
          mv ./drasyl-shared-library/pypi/src/drasyl/libdrasyl-* ./drasyl-shared-library/pypi/src/drasyl/libdrasyl/
          echo $VERSION > ./drasyl-shared-library/pypi/VERSION
        if: success() && matrix.os != 'windows-latest'

      - name: Extract shared library on Windows
        run: |
          $VERSION = .\mvnw.cmd help:evaluate "-Dexpression=project.version" -q -DforceStdout
          Expand-Archive -Path .\libdrasyl-*.zip -DestinationPath .\drasyl-shared-library\pypi\src\drasyl\
          Move-Item -Path .\drasyl-shared-library\pypi\src\drasyl\libdrasyl-* -Destination .\drasyl-shared-library\pypi\src\drasyl\libdrasyl\
          Get-ChildItem -Path .\drasyl-shared-library\pypi\src\drasyl\
          $VERSION > .\drasyl-shared-library\pypi\VERSION
        if: success() && startsWith(matrix.os, 'windows-')

      - uses: actions/setup-python@v5.3.0
        with:
          python-version: '3.10'
          check-latest: true

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.9.0

      - name: Build wheels
        working-directory: ./drasyl-shared-library/pypi/
        run: python -m cibuildwheel --output-dir ../../wheelhouse/
        env:
          CIBW_ARCHS: auto64
          #CIBW_BUILD_VERBOSITY: 3
          # "auditwheel repair" fails despite the fact that our python package runs
          # under many linux distributions. So we just deactivate it.
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: ""

      # required by publich-wheels
      - uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.job_name }}
          path: ./wheelhouse/*.whl

  publish-wheels:
    name: Publish wheels
    runs-on: ubuntu-latest
    needs: build-wheels

    steps:
      - name: Download wheel artifacts
        uses: actions/download-artifact@v4

      - name: Consolidate wheel artifacts
        run: |
          mkdir ./wheelhouse/
          mv ./wheel-*/*.whl ./wheelhouse/

      # As "auditwheel repair" has been deativated under linux, we need to manually
      # "mark" the package to be compatible with many linux distributions. Otherwise
      # PyPI will reject it. This behavior is definitely not intended, but I don't
      # want to bother with auditwheel anymore 🙃.
      - name: Rename Linux packages so that they are accepted by PyPI
        working-directory: ./wheelhouse/
        run: >
          for file in *linux_x86_64.whl; do
            mv "$file" "${file//linux_x86_64/manylinux_2_17_x86_64.manylinux2014_x86_64}";
          done

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages_dir: ./wheelhouse/
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip_existing: true

  cli-native-image:
    strategy:
      fail-fast: false
      matrix:
        job_name:
          - linux-amd64
          - linux-arm64
          - macos-amd64
          - windows-amd64

        include:
          - job_name: linux-amd64
            os: ubuntu-20.04 # run intentionally on older ubuntu. Otherwise, graal builds will depend on a too-new libc version, which is not available on every linux distributions

          - job_name: linux-arm64
            os: [ self-hosted, linux, ARM64 ]

          - job_name: macos-amd64
            os: macOS-latest

          - job_name: windows-amd64
            os: windows-latest

    name: Build CLI on ${{ matrix.job_name }}
    runs-on: ${{ matrix.os }}

    steps:
      # git checkout
      - name: Checkout the repository
        uses: actions/checkout@v4.1.2

      # install build dependencies (windows only)
      - name: Configure Developer Command Prompt for Microsoft Visual C++ on Windows
        uses: ilammy/msvc-dev-cmd@v1.13.0
        if: startsWith(matrix.os, 'windows-')

      - name: Configure MSBuild on Windows
        uses: microsoft/setup-msbuild@v2
        if: startsWith(matrix.os, 'windows-')

      # set up GraalVM
      - name: Set up GraalVM environment
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: 17
          distribution: 'graalvm'
          components: native-image
          cache: 'maven'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # build native image
      - name: Build Native Image
        env:
          MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
        run: ./mvnw --batch-mode --errors --fail-at-end --show-version --update-snapshots -DinstallAtEnd=true -DdeployAtEnd=true --activate-profiles native,fast --projects drasyl-cli --also-make package

      # package native image
      - name: Build Package on *nix x86
        run: |
          VERSION=$(./mvnw help:evaluate "-Dexpression=project.version" -q -DforceStdout)
          mkdir -p drasyl-${VERSION}-${{ matrix.job_name }}/bin/
          mv ./drasyl drasyl-${VERSION}-${{ matrix.job_name }}/bin
          cp ./LICENSE drasyl-${VERSION}-${{ matrix.job_name }}/
          zip -r drasyl-${VERSION}-${{ matrix.job_name }}.zip ./drasyl-${VERSION}-${{ matrix.job_name }}
          for file in drasyl-*.zip; do sha256sum "$file" | awk '{print $1}' > "$file.sha256"; done
        if: success() && startsWith(matrix.os, 'ubuntu-')

      - name: Build Package on *nix ARM
        run: |
          sudo apt-get install zip -y
          VERSION=$(./mvnw help:evaluate "-Dexpression=project.version" -q -DforceStdout)
          mkdir -p drasyl-${VERSION}-${{ matrix.job_name }}/bin/
          mv ./drasyl drasyl-${VERSION}-${{ matrix.job_name }}/bin
          cp ./LICENSE drasyl-${VERSION}-${{ matrix.job_name }}/
          zip -r drasyl-${VERSION}-${{ matrix.job_name }}.zip ./drasyl-${VERSION}-${{ matrix.job_name }}
          for file in drasyl-*.zip; do sha256sum "$file" | awk '{print $1}' > "$file.sha256"; done
        if: success() && matrix.job_name == 'linux-arm64'

      - name: Build Package on Mac x86
        run: |
          VERSION=$(./mvnw help:evaluate "-Dexpression=project.version" -q -DforceStdout)
          mkdir -p drasyl-${VERSION}-${{ matrix.job_name }}/bin/
          mv ./drasyl drasyl-${VERSION}-${{ matrix.job_name }}/bin
          cp ./LICENSE drasyl-${VERSION}-${{ matrix.job_name }}/
          zip -r drasyl-${VERSION}-${{ matrix.job_name }}.zip ./drasyl-${VERSION}-${{ matrix.job_name }}
          for file in drasyl-*.zip; do shasum -a 256 "$file" | awk '{print $1}' > "$file.sha256"; done
        if: success() && startsWith(matrix.os, 'macOS-')

      - name: Build Package on Windows
        run: |
          $VERSION = .\mvnw.cmd help:evaluate "-Dexpression=project.version" -q -DforceStdout
          New-Item "./drasyl-${VERSION}-${{ matrix.job_name }}/bin/" -ItemType Directory -ea 0
          Move-Item -Path ./drasyl.exe -Destination "./drasyl-${VERSION}-${{ matrix.job_name }}/bin"
          Copy-Item "./LICENSE" -Destination "./drasyl-${VERSION}-${{ matrix.job_name }}"
          Compress-Archive -Path "./drasyl-${VERSION}-${{ matrix.job_name }}" -Update -DestinationPath ./drasyl-${VERSION}-${{ matrix.job_name }}.zip
          CertUtil -hashfile "./drasyl-${VERSION}-${{ matrix.job_name }}.zip" SHA256 | Select-String -Pattern "CertUtil","SHA256" -CaseSensitive -NotMatch > "./drasyl-${VERSION}-${{ matrix.job_name }}.zip.sha256"; (Get-Content "./drasyl-${VERSION}-${{ matrix.job_name }}.zip.sha256") -join '' | Set-Content "./drasyl-${VERSION}-${{ matrix.job_name }}.zip.sha256"
        if: success() && startsWith(matrix.os, 'windows-')

      # upload package
      - name: Upload Package
        uses: softprops/action-gh-release@v2
        with:
          files: |
            drasyl-*.zip
            drasyl-*.zip.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Release docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v4.1.2
      - name: Get actual patch version
        id: actual_patch_version
        run: echo ACTUAL_PATCH_VERSION=$(echo ${{ github.event.release.tag_name }} | cut -d / -f 3 | sed 's/v//g' | cut -d "." -f 1,2,3) >> $GITHUB_OUTPUT
      - name: Get actual minor version
        id: actual_minor_version
        run: echo ACTUAL_MINOR_VERSION=$(echo ${{ github.event.release.tag_name }} | cut -d / -f 3 | sed 's/v//g' | cut -d "." -f 1,2) >> $GITHUB_OUTPUT
      - name: Get actual major version
        id: actual_major_version
        run: echo ACTUAL_MAJOR_VERSION=$(echo ${{ github.event.release.tag_name }} | cut -d / -f 3 | sed 's/v//g' | cut -d "." -f 1) >> $GITHUB_OUTPUT
      - name: Build and publish image
        uses: ilteoood/docker_buildx@1.1.0
        with:
          tag: latest,${{ steps.actual_patch_version.outputs.ACTUAL_PATCH_VERSION }},${{ steps.actual_minor_version.outputs.ACTUAL_MINOR_VERSION }},${{ steps.actual_major_version.outputs.ACTUAL_MAJOR_VERSION }}
          imageName: drasyl/drasyl
          platform: linux/amd64
          publish: true
          dockerUser: ${{ secrets.DOCKER_HUB_USER }}
          dockerPassword: ${{ secrets.DOCKER_HUB_PASSWORD }}

  homebrew:
    name: Update Homebrew cask
    needs: [cli-java]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout https://github.com/drasyl/homebrew-tap
        uses: actions/checkout@v4.1.2
        with:
          token: ${{ secrets.GH_TOKEN }}
          repository: drasyl/homebrew-tap
      - name: Download ZIP
        run: wget https://github.com/drasyl/drasyl/releases/download/${{ github.event.release.tag_name }}/drasyl-$(echo ${{ github.event.release.tag_name }} | sed 's/v//').zip -O drasyl.zip
      - name: Calculate SHA256
        id: sha
        run: |
          s=$(sha256sum drasyl.zip | awk  '{ print $1 }')
          echo "SHA256 is: $s"
          echo sha=${s} >> $GITHUB_OUTPUT
      - name: Update Formula
        run: |
          sed -i -e "s/  version.*/  version \"$(echo ${{ github.event.release.tag_name }} | sed 's/v//')\"/" Formula/drasyl.rb
          sed -i -e "s/  sha256.*/  sha256 \"$(echo ${{ steps.sha.outputs.sha }} | sed 's/v//')\"/" Formula/drasyl.rb
          cat Formula/drasyl.rb
      - uses: stefanzweifel/git-auto-commit-action@v5.1.0
        with:
          commit_message: Update drasyl formula to ${{ github.event.release.tag_name }}
          commit_user_name: drasyl-bot
          commit_user_email: ${{ secrets.DRASYL_BOT_EMAIL }}
          commit_author: drasyl-bot <${{ secrets.DRASYL_BOT_EMAIL }}>
          file_pattern: Formula/drasyl.rb

  chocolatey:
    name: Update Chocolatey package
    needs: [cli-java]
    runs-on: windows-latest
    steps:
      - name: Checkout https://github.com/drasyl/drasyl-choco
        uses: actions/checkout@v4.1.2
        with:
          token: ${{ secrets.GH_TOKEN }}
          repository: drasyl/drasyl-choco
      - name: Download ZIP, update versions and checksum
        id: choco
        run: |
          $Version = "${{ github.event.release.tag_name }}".substring(1)
          echo $Version

          $SHA = (Invoke-RestMethod -Uri https://github.com/drasyl/drasyl/releases/download/${{ github.event.release.tag_name }}/drasyl-$($Version).zip.sha256).Trim().ToUpper()
          echo $SHA

          (Get-Content ./drasyl.nuspec) -replace '<version>.*</version>', "<version>$Version</version>" | Set-Content ./drasyl.nuspec
          Get-Content ./drasyl.nuspec

          (Get-Content ./tools/chocolateyinstall.ps1) -replace 'checksum\s+=.*', "checksum       = `"$SHA`"" | Set-Content ./tools/chocolateyinstall.ps1
          Get-Content ./tools/chocolateyinstall.ps1

          echo "version=$Version" >> $env:GITHUB_OUTPUT
      - name: Create package
        run: choco pack
      - name: Push package
        env:
          API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}
        run: |
          choco apikey --key $Env:API_KEY --source https://push.chocolatey.org/
          choco push drasyl.${{ steps.choco.outputs.version }}.nupkg --source https://push.chocolatey.org/ --force
      - uses: stefanzweifel/git-auto-commit-action@v5.1.0
        with:
          commit_message: Update drasyl package to ${{ github.event.release.tag_name }}
          commit_user_name: drasyl-bot
          commit_user_email: ${{ secrets.DRASYL_BOT_EMAIL }}
          commit_author: drasyl-bot <${{ secrets.DRASYL_BOT_EMAIL }}>
          file_pattern: drasyl.nuspec tools/chocolateyinstall.ps1
